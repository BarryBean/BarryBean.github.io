<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>滑动窗口问题</title>
    <link href="/2020/04/26/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98/"/>
    <url>/2020/04/26/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>滑动窗口问题的思路和基础代码模板。</p><a id="more"></a><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><ol><li>设置左右指针，初始化都为0，把[left,right]当成一个窗口；</li><li>不断增大right，直到窗口内的子串符合要求；</li><li>不断增大left，缩小窗口直到窗口内子串不符合要求，在缩小left时记录结果；</li><li>直到right到达字符串串尾。</li></ol><p>对于如何判断是否符合要求，建立两个哈希表，一个needs记录pattern子串中字符出现次数，一个windows记录当前窗口子串中字符出现次数。用一个match记录符合规则的字符数。</p><p>当match等于needs的长度时，表明满足条件，开始缩小窗口。每次缩小时，都要再次判断条件，更新match。</p><p>注：在java中除了设置hashmap还可以直接用数组建立char[256/128]，操作也简便些。</p><h1 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h1><p>基础思想的模板</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;    window.add(s[right]);    right++;        <span class="hljs-keyword">while</span> (valid) &#123;        window.remove(s[left]);        left++;    &#125;&#125;</code></pre><p>详细些</p><pre><code class="hljs java"><span class="hljs-comment">// 双指针</span><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>,right = <span class="hljs-number">0</span>;<span class="hljs-comment">// 滑动窗口</span>HashMap/Character[] windows = &#123;&#125;;<span class="hljs-comment">// 匹配条件</span>HashMap/Character[] needs = &#123;&#125;;<span class="hljs-comment">// 条件判断操作</span><span class="hljs-keyword">var</span> valid;<span class="hljs-comment">// 符合条件的字符数</span><span class="hljs-keyword">int</span> match = <span class="hljs-number">0</span> ;<span class="hljs-comment">// 变化窗口</span><span class="hljs-keyword">while</span>(right &lt; A.length)&#123;    <span class="hljs-comment">// 增大窗口</span>    <span class="hljs-keyword">if</span>(valid)&#123;        windows.add(B[right]);    &#125;    right++;    <span class="hljs-comment">// 符合子串匹配条件</span>    <span class="hljs-keyword">while</span>(match === needs.length)&#123;        <span class="hljs-keyword">if</span>(valid)&#123;            <span class="hljs-comment">// 缩小窗口</span>            window.remove(B[left]);            <span class="hljs-comment">// 归位规则计数</span>            match--;            <span class="hljs-comment">// 继续下一轮、增大前进窗口</span>            left++;        &#125;    &#125;&#125;</code></pre><h1 id="题目举例"><a href="#题目举例" class="headerlink" title="题目举例"></a>题目举例</h1><table><thead><tr><th>题号</th><th>题目</th><th>难度</th></tr></thead><tbody><tr><td>3</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/3%E6%97%A0%E9%87%8D%E5%A4%8D%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.md" target="_blank" rel="noopener">无重复的最长子串</a></td><td>中等</td></tr><tr><td>76</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/76%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.md" target="_blank" rel="noopener">最小覆盖子串</a></td><td>困难</td></tr><tr><td>209</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/209%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.md" target="_blank" rel="noopener">长度最小的子数组</a></td><td>中等</td></tr><tr><td>438</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/438%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.md" target="_blank" rel="noopener">找到字符串中所有字母异位词</a></td><td>中等</td></tr><tr><td>567</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/567%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.md" target="_blank" rel="noopener">字符串的排列</a></td><td>中等</td></tr><tr><td>239</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E5%8D%95%E8%B0%83%E6%A0%88/239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.md" target="_blank" rel="noopener">滑动窗口最大值</a></td><td>困难</td></tr><tr><td>480</td><td><a href="https://github.com/BarryBean/AlgorithmNotes/blob/master/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/480%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0.md" target="_blank" rel="noopener">滑动窗口中位数</a></td><td>困难</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
